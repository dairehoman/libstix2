// Copyright 2017 Bret Jordan, All rights reserved.
//
// Use of this source code is governed by an Apache 2.0 license that can be
// found in the LICENSE file in the root of the source tree.

package objects

import (
	"github.com/dairehoman/libstix2/objects/properties"
)

// ----------------------------------------------------------------------
//
// Define Message Type
//
// ----------------------------------------------------------------------

/*
MalwareType - This type implements the STIX 2 Malware SDO and defines
all of the properties methods needed to create and work with the STIX Malware
SDO. All of the methods not defined local to this type are inherited from
the individual properties.

The following information comes directly from the STIX 2 specification documents.

Malware is a type of TTP that is also known as malicious code and malicious
software, and refers to a program that is inserted into a system, usually
covertly, with the intent of compromising the confidentiality, integrity, or
availability of the victim's data, applications, or operating system (OS) or of
otherwise annoying or disrupting the victim. Malware such as viruses and worms
are usually designed to perform these nefarious functions in such a way that
users are unaware of them, at least initially.

The Malware SDO characterizes, identifies, and categorizes malware samples and
families via a text description property. This provides detailed information
about how the malware works and what it does. Relationships from Malware can
capture what the malware targets (Vulnerability and Identity) and link it to
another Malware SDO that it is a variant of.
*/
type MalwareType struct {
	properties.CommonObjectPropertiesType
	properties.NamePropertyType
	properties.DescriptionPropertyType
	properties.KillChainPhasesPropertyType
	// Filenames            []string          `json:"filenames,omitempty"`
	// Size                 int               `json:"size,omitempty"`
	// Hashes               map[string]string `json:"hashes,omitempty"`
	// First_seen           string            `json:"first_seen,omitempty"`
	// First_seen_precision string            `json:"first_seen_precision,omitempty"`
	// Region               string            `json:"region,omitempty"`
	// Country              string            `json:"country,omitempty"`
	// Scan_data            []ScanDataType    `json:"scan_data,omitempty"`
}

// ----------------------------------------------------------------------
//
// Initialization Functions
//
// ----------------------------------------------------------------------

/*
NewMalware - This function will create a new STIX Malware object and return it
as a pointer.
*/
func NewMalware(ver string) *MalwareType {
	var obj MalwareType
	obj.InitObjectProperties("malware", ver)
	return &obj
}

// ----------------------------------------------------------------------
//
// Public Methods - MalwareType
//
// ----------------------------------------------------------------------

// func (this *MalwareType) AddFilename(value string) {
// 	if this.Filenames == nil {
// 		a := make([]string, 0)
// 		this.Filenames = a
// 	}
// 	this.Filenames = append(this.Filenames, value)
// }

// func (this *MalwareType) SetSize(i int) {
// 	this.Size = i
// }

// func (this *MalwareType) AddHash(k, v string) {
// 	if this.Hashes == nil {
// 		m := make(map[string]string, 0)
// 		this.Hashes = m
// 	}
// 	this.Hashes[k] = v
// }

// SetFirstSeen takes in two parameters and returns and error if there is one
// param: t a timestamp in either time.Time or string format
// param: s a timestamp precision in string format
// func (this *MalwareType) SetFirstSeen(t interface{}, s string) error {

// 	ts, err := this.VerifyTimestamp(t)
// 	if err != nil {
// 		return err
// 	}
// 	this.First_seen = ts

// 	p, err := this.VerifyPrecision(s)
// 	if err != nil {
// 		return err
// 	}
// 	this.First_seen_precision = p

// 	return nil
// }

// func (this *MalwareType) SetRegion(s string) {
// 	this.Region = s
// }

// func (this *MalwareType) SetCountry(s string) {
// 	// TODO make sure this is a two digit country code
// 	this.Country = s
// }

// func (this *MalwareType) NewScanData() *ScanDataType {
// 	var o ScanDataType

// 	if this.Scan_data == nil {
// 		a := make([]ScanDataType, 0)
// 		this.Scan_data = a
// 	}

// 	positionThatAppendWillUse := len(this.Scan_data)
// 	this.Scan_data = append(this.Scan_data, o)
// 	return &this.Scan_data[positionThatAppendWillUse]
// }

// // import (
// // 	"github.com/dairehoman/libstix2/objects/common"
// // )

// // ----------------------------------------------------------------------
// // Define Message Type
// // ----------------------------------------------------------------------

// type ScanDataType struct {
// 	Product        string `json:"product,omitempty"`
// 	Engine         string `json:"engine,omitempty"`
// 	Definition     string `json:"definition,omitempty"`
// 	Submitted      string `json:"submitted,omitempty"`
// 	Scanned        string `json:"scanned,omitempty"`
// 	Classification string `json:"classification,omitempty"`
// 	Details        string `json:"details,omitempty"`
// }

// // ----------------------------------------------------------------------
// // Public Methods - ScanDataType
// // ----------------------------------------------------------------------

// func (this *ScanDataType) SetProduct(s string) {
// 	this.Product = s
// }

// // This function will set the version number of the Engine
// func (this *ScanDataType) SetEngineVersion(s string) {
// 	this.Engine = s
// }

// // This function will set the version number of the definition file
// func (this *ScanDataType) SetDefinitionVersion(s string) {
// 	this.Definition = s
// }

// // SetSubmitted takes in two parameters and returns and error if there is one
// // param: t a timestamp in either time.Time or string format
// // func (this *ScanDataType) SetSubmitted(t interface{}) error {

// // 	ts, err := common.VerifySTIXTimestamp(t)
// // 	if err != nil {
// // 		return err
// // 	}
// // 	this.Submitted = ts

// // 	return nil
// // }

// // SetScanned takes in two parameters and returns and error if there is one
// // param: t a timestamp in either time.Time or string format
// // func (this *ScanDataType) SetScanned(t interface{}) error {

// // 	ts, err := common.VerifySTIXTimestamp(t)
// // 	if err != nil {
// // 		return err
// // 	}
// // 	this.Scanned = ts

// // 	return nil
// // }

// func (this *ScanDataType) SetClassification(s string) {
// 	this.Classification = s
// }

// func (this *ScanDataType) SetDetails(s string) {
// 	this.Details = s
// }
